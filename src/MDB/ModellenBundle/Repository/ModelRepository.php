<?php

namespace MDB\ModellenBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ModelRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ModelRepository extends EntityRepository {

  public function create($model) {
    $this->getEntityManager()->persist($model);
    $this->getEntityManager()->flush();
  }

  public function findByParams($params) {
    $where = '';
    foreach ($params as $key => $value) {
      if (strpos($key, "min") === false && strpos($key, "max") === false && strpos($key, 'rating') === false) {
        //checkbox
        $where.="m." . $key . "= :" . $key . " OR ";
      } else if (strpos($key, 'min') !== false) {
        $property = str_replace("min", "", $key);
        $where.="m." . $property . " BETWEEN :" . $key . " ";
      } else if (strpos($key, 'max') !== false) {
        $where.="AND :" . $key . " AND ";
      } else if (strpos($key, "rating") !== false) {
        continue;
      }
      else if (strpos($key,"andereMagazinesOmschrijving")){
         $where.="AND m.andereMagazinesOmschrijving LIKE %:"+$key+"% AND ";
      }
    }
   
    $where = rtrim($where, 'AND ');
    $where = rtrim($where, 'OR ');
    $qb = $this->getEntityManager()->createQueryBuilder();
    //query nog optimaliseren
    $qb->select('m')->from('MDBModellenBundle:Model', 'm')
            ->innerJoin('MDBRedacteurBundle:Rating', 'r', 'with', "r.model=m")
            ->where($where);
    foreach ($params as $key => $value) {
      if (strpos($key, 'rating') === false) {
        $qb->setParameter($key, $value);
      }
    }
    $modellen = $qb->getQuery()->getResult();
    foreach ($modellen as $key => $model) {
      $totaalRating = 0;
      //kan misschien nog via SQL
      //ratings ophalen om gemiddelde te berekenen
      $ratings = $model->getRatings();
      foreach ($ratings as $rating) {
        if ($rating->getModel()->getId() === $model->getId()) {
          $totaalRating+=$rating->getWaarde();
        }
      }
      $avgRating = $totaalRating / count($model->getRatings());
      if ($avgRating < $params['rating']) {
        unset($modellen[$key]);
      }
    }
    return $modellen;
  }

  public function update($model) {
    $this->getEntityManager()->merge($model);
    $this->getEntityManager()->flush();
  }

  public function delete($model) {
    $this->getEntityManager()->remove($model);
    $this->getEntityManager()->flush();
  }

  public function getUnratedModellen() {
    $qb = $this->getEntityManager()->createQueryBuilder();

    $modellen = $qb->select('m')->from('MDBModellenBundle:Model', "m")->getQuery()->getResult();
    foreach ($modellen as $key => $model) {
      $count = count($model->getRatings());

      /* //alle modellen met ratings eruitfilteren 
        if ($count>0){
        unset($modellen[$key]);
        } */
    }
    return $modellen;
  }

}
